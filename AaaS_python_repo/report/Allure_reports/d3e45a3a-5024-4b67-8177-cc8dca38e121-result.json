{"name": "verify logging into application", "status": "failed", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button id=\"login\" class=\"btn btn-primary btn-arrow\">...</button> is not clickable at point (1660, 595). Other element would receive the click: <div class=\"loginLoadingBar\" style=\"opacity: 0; transform: scaleX(0.988656); transform-origin: left center; transition: transform 800ms linear 0s; width: 100%; will-change: transform, opacity; height: 47px; top: -47px;\"></div>\n  (Session info: chrome=95.0.4638.69)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x011E0C43+2493507]\n\tOrdinal0 [0x0117A4B1+2073777]\n\tOrdinal0 [0x01082608+1058312]\n\tOrdinal0 [0x010B2B39+1256249]\n\tOrdinal0 [0x010B0E78+1248888]\n\tOrdinal0 [0x010AEC4D+1240141]\n\tOrdinal0 [0x010ADA98+1235608]\n\tOrdinal0 [0x010A3787+1193863]\n\tOrdinal0 [0x010C5943+1333571]\n\tOrdinal0 [0x010A35A6+1193382]\n\tOrdinal0 [0x010C5A2A+1333802]\n\tOrdinal0 [0x010D5038+1396792]\n\tOrdinal0 [0x010C580B+1333259]\n\tOrdinal0 [0x010A2314+1188628]\n\tOrdinal0 [0x010A316F+1192303]\n\tGetHandleVerifier [0x01367BF6+1548950]\n\tGetHandleVerifier [0x0141461C+2256060]\n\tGetHandleVerifier [0x0126C13B+518107]\n\tGetHandleVerifier [0x0126B1E0+514176]\n\tOrdinal0 [0x0117F53D+2094397]\n\tOrdinal0 [0x01183418+2110488]\n\tOrdinal0 [0x01183552+2110802]\n\tOrdinal0 [0x0118CE81+2150017]\n\tBaseThreadInitThunk [0x763B6739+25]\n\tRtlGetFullPathName_UEx [0x77228AFF+1215]\n\tRtlGetFullPathName_UEx [0x77228ACD+1165]", "trace": "request = <FixtureRequest for <Function test_verify_logging_into_application>>, _pytest_bdd_example = {}\n\n    @pytest.mark.usefixtures(*args)\n    def scenario_wrapper(request, _pytest_bdd_example):\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\n..\\.virtualenvs\\AaaS_python_repo-qOQ6V3NE\\lib\\site-packages\\pytest_bdd\\scenario.py:174: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\.virtualenvs\\AaaS_python_repo-qOQ6V3NE\\lib\\site-packages\\pytest_bdd\\scenario.py:144: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n..\\.virtualenvs\\AaaS_python_repo-qOQ6V3NE\\lib\\site-packages\\pytest_bdd\\scenario.py:114: in _execute_step_function\n    return_value = step_func(**kwargs)\ntests\\step_defs\\test_login_steps.py:26: in user_clicks_on_login_button\n    driver.find_element(By.ID, 'login').click()\n..\\.virtualenvs\\AaaS_python_repo-qOQ6V3NE\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\.virtualenvs\\AaaS_python_repo-qOQ6V3NE\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:693: in _execute\n    return self._parent.execute(command, params)\n..\\.virtualenvs\\AaaS_python_repo-qOQ6V3NE\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:418: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E8C32CF310>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...unk [0x763B6739+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x77228AFF+1215]\\\\n\\\\tRtlGetFullPathName_UEx [0x77228ACD+1165]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button id=\"login\" class=\"btn btn-primary btn-arrow\">...</button> is not clickable at point (1660, 595). Other element would receive the click: <div class=\"loginLoadingBar\" style=\"opacity: 0; transform: scaleX(0.988656); transform-origin: left center; transition: transform 800ms linear 0s; width: 100%; will-change: transform, opacity; height: 47px; top: -47px;\"></div>\nE         (Session info: chrome=95.0.4638.69)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x011E0C43+2493507]\nE       \tOrdinal0 [0x0117A4B1+2073777]\nE       \tOrdinal0 [0x01082608+1058312]\nE       \tOrdinal0 [0x010B2B39+1256249]\nE       \tOrdinal0 [0x010B0E78+1248888]\nE       \tOrdinal0 [0x010AEC4D+1240141]\nE       \tOrdinal0 [0x010ADA98+1235608]\nE       \tOrdinal0 [0x010A3787+1193863]\nE       \tOrdinal0 [0x010C5943+1333571]\nE       \tOrdinal0 [0x010A35A6+1193382]\nE       \tOrdinal0 [0x010C5A2A+1333802]\nE       \tOrdinal0 [0x010D5038+1396792]\nE       \tOrdinal0 [0x010C580B+1333259]\nE       \tOrdinal0 [0x010A2314+1188628]\nE       \tOrdinal0 [0x010A316F+1192303]\nE       \tGetHandleVerifier [0x01367BF6+1548950]\nE       \tGetHandleVerifier [0x0141461C+2256060]\nE       \tGetHandleVerifier [0x0126C13B+518107]\nE       \tGetHandleVerifier [0x0126B1E0+514176]\nE       \tOrdinal0 [0x0117F53D+2094397]\nE       \tOrdinal0 [0x01183418+2110488]\nE       \tOrdinal0 [0x01183552+2110802]\nE       \tOrdinal0 [0x0118CE81+2150017]\nE       \tBaseThreadInitThunk [0x763B6739+25]\nE       \tRtlGetFullPathName_UEx [0x77228AFF+1215]\nE       \tRtlGetFullPathName_UEx [0x77228ACD+1165]\n\n..\\.virtualenvs\\AaaS_python_repo-qOQ6V3NE\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: ElementClickInterceptedException"}, "steps": [{"name": "Given user lands on login page", "status": "passed", "start": 1636545429227, "stop": 1636545441112}, {"name": "When user enters \"valid username\"", "status": "passed", "start": 1636545441116, "stop": 1636545444522}, {"name": "And user enters \"valid password\"", "status": "passed", "start": 1636545444523, "stop": 1636545445064}, {"name": "And user clicks on login button", "status": "failed", "statusDetails": {"message": "Message: element click intercepted: Element <button id=\"login\" class=\"btn btn-primary btn-arrow\">...</button> is not clickable at point (1660, 595). Other element would receive the click: <div class=\"loginLoadingBar\" style=\"opacity: 0; transform: scaleX(0.988656); transform-origin: left center; transition: transform 800ms linear 0s; width: 100%; will-change: transform, opacity; height: 47px; top: -47px;\"></div>\n  (Session info: chrome=95.0.4638.69)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x011E0C43+2493507]\n\tOrdinal0 [0x0117A4B1+2073777]\n\tOrdinal0 [0x01082608+1058312]\n\tOrdinal0 [0x010B2B39+1256249]\n\tOrdinal0 [0x010B0E78+1248888]\n\tOrdinal0 [0x010AEC4D+1240141]\n\tOrdinal0 [0x010ADA98+1235608]\n\tOrdinal0 [0x010A3787+1193863]\n\tOrdinal0 [0x010C5943+1333571]\n\tOrdinal0 [0x010A35A6+1193382]\n\tOrdinal0 [0x010C5A2A+1333802]\n\tOrdinal0 [0x010D5038+1396792]\n\tOrdinal0 [0x010C580B+1333259]\n\tOrdinal0 [0x010A2314+1188628]\n\tOrdinal0 [0x010A316F+1192303]\n\tGetHandleVerifier [0x01367BF6+1548950]\n\tGetHandleVerifier [0x0141461C+2256060]\n\tGetHandleVerifier [0x0126C13B+518107]\n\tGetHandleVerifier [0x0126B1E0+514176]\n\tOrdinal0 [0x0117F53D+2094397]\n\tOrdinal0 [0x01183418+2110488]\n\tOrdinal0 [0x01183552+2110802]\n\tOrdinal0 [0x0118CE81+2150017]\n\tBaseThreadInitThunk [0x763B6739+25]\n\tRtlGetFullPathName_UEx [0x77228AFF+1215]\n\tRtlGetFullPathName_UEx [0x77228ACD+1165]\n", "trace": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button id=\"login\" class=\"btn btn-primary btn-arrow\">...</button> is not clickable at point (1660, 595). Other element would receive the click: <div class=\"loginLoadingBar\" style=\"opacity: 0; transform: scaleX(0.988656); transform-origin: left center; transition: transform 800ms linear 0s; width: 100%; will-change: transform, opacity; height: 47px; top: -47px;\"></div>\n  (Session info: chrome=95.0.4638.69)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x011E0C43+2493507]\n\tOrdinal0 [0x0117A4B1+2073777]\n\tOrdinal0 [0x01082608+1058312]\n\tOrdinal0 [0x010B2B39+1256249]\n\tOrdinal0 [0x010B0E78+1248888]\n\tOrdinal0 [0x010AEC4D+1240141]\n\tOrdinal0 [0x010ADA98+1235608]\n\tOrdinal0 [0x010A3787+1193863]\n\tOrdinal0 [0x010C5943+1333571]\n\tOrdinal0 [0x010A35A6+1193382]\n\tOrdinal0 [0x010C5A2A+1333802]\n\tOrdinal0 [0x010D5038+1396792]\n\tOrdinal0 [0x010C580B+1333259]\n\tOrdinal0 [0x010A2314+1188628]\n\tOrdinal0 [0x010A316F+1192303]\n\tGetHandleVerifier [0x01367BF6+1548950]\n\tGetHandleVerifier [0x0141461C+2256060]\n\tGetHandleVerifier [0x0126C13B+518107]\n\tGetHandleVerifier [0x0126B1E0+514176]\n\tOrdinal0 [0x0117F53D+2094397]\n\tOrdinal0 [0x01183418+2110488]\n\tOrdinal0 [0x01183552+2110802]\n\tOrdinal0 [0x0118CE81+2150017]\n\tBaseThreadInitThunk [0x763B6739+25]\n\tRtlGetFullPathName_UEx [0x77228AFF+1215]\n\tRtlGetFullPathName_UEx [0x77228ACD+1165]\n\n"}, "start": 1636545445066, "stop": 1636545446250}], "start": 1636545429227, "stop": 1636545446250, "uuid": "0c5018d2-0ce0-e092-d6fc-ebb82520fb64", "historyId": "0c5018d20ce0e092d6fcebb82520fb64", "fullName": "features\\login.feature:verify logging into application", "labels": [{"name": "host", "value": "sasi-auto-py01"}, {"name": "thread", "value": "12604-MainThread"}, {"name": "framework", "value": "pytest-bdd"}, {"name": "language", "value": "cpython3"}, {"name": "feature", "value": "verify login functionality"}]}